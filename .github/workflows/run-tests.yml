name: QGIS tests

on:
  push:
    branches:
      - master
      - test-focal
      - release-**
    paths:
    - 'src/**'
    - 'external/**'
    - 'tests/**'
    - 'CMakeLists.txt'
    - '.github/workflows/**'
    - '.docker/**'
  pull_request:
    branches:
      - master
      - release-**
    paths:
    - 'src/**'
    - 'external/**'
    - 'tests/**'
    - 'CMakeLists.txt'
    - '.github/workflows/**'
    - '.docker/**'

jobs:
  build:
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      GH_WORKSPACE: ${{ github.workspace }} # used in docker compose

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set vars
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_PR_NUMBER: ${{github.event.number}}
        run: |
          DOCKER_TAG=$(echo $( [[ ${GITHUB_EVENT_NAME} =~ ^pull_request$ ]] && echo ${GITHUB_BASE_REF} || echo ${GITHUB_REF##*/} ) | sed 's/^master$/latest/')
          CTEST_BUILD_NAME=$( [[ ${GITHUB_EVENT_NAME} =~ ^pull_request$ ]] && echo PR ${GITHUB_PR_NUMBER} || echo ${GITHUB_REF##*/} )" (${GITHUB_SHA})"
          echo "DOCKER_TAG=${DOCKER_TAG}" >> $GITHUB_ENV
          echo "CTEST_BUILD_NAME=${CTEST_BUILD_NAME}" >> $GITHUB_ENV

      - name: Print vars
        run: |
          echo DOCKER_TAG: ${DOCKER_TAG}
          echo CTEST_BUILD_NAME: ${CTEST_BUILD_NAME}

      - name: Increase Docker base image size
        # https://stackoverflow.com/questions/50140939/increase-docker-container-size-from-default-10gb-on-rhel7
        run: |
          sudo rm /etc/docker/daemon.json
          echo '{"storage-opt": [ "dm.basesize=50G" ]}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart

      - name: Build deps
        run: |
          pushd .docker
          docker pull qgis/qgis3-build-deps:${DOCKER_TAG}
          docker build --cache-from qgis/qgis3-build-deps:${DOCKER_TAG} -t qgis/qgis3-build-deps:${DOCKER_TAG} -f qgis3-build-deps.dockerfile .
          popd

      - name: Push deps image
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
          docker push "qgis/qgis3-build-deps:${DOCKER_TAG}"

      - name: Prepare build cache for pull request
        uses: actions/cache@v2
        if: github.event_name == 'pull_request'
        with:
          path: /home/runner/QGIS/.ccache
          key: build-ccache-${{ github.head_ref }}
          # The head_ref or source branch of the pull request in a workflow run.
          # The base_ref or target branch of the pull request in a workflow run.
          restore-keys: |
            build-ccache-${{ github.base_ref }}
            build-ccache-master

      - name: Prepare build cache for branch/tag
        # use a fork of actions/cache@v2 to upload cache even when the build or test failed
        uses: pat-s/always-upload-cache@v2.1.0
        if: github.event_name != 'pull_request'
        with:
          path: /home/runner/QGIS/.ccache
          # The branch or tag ref that triggered the workflow run. For branches this in the format refs/heads/<branch_name>, and for tags it is refs/tags/<tag_name>
          key: build-ccache-${{ github.ref }}
          restore-keys: |
            build-ccache-master

      - name: Compile QGIS
        run: |
          docker run -t --name qgis_container \
                     -v $(pwd):/root/QGIS \
                     -v /home/runner/QGIS/.ccache:/root/.ccache \
                     --env-file .docker/docker-variables.env \
                     qgis/qgis3-build-deps:${DOCKER_TAG} \
                     /root/QGIS/.docker/docker-qgis-build.sh
          docker commit qgis_container qgis_image

      - name: run unit tests
        run: |
          docker-compose -f .docker/docker-compose-testing.yml run qgis-deps /root/QGIS/.docker/docker-qgis-test.sh

      - name: QGIS runners
        run: |
          docker run -d --name qgis-testing-environment \
                     -v $(pwd):/root/QGIS \
                     -v $(pwd)/tests/src/python:/tests_directory \
                     -v $(pwd)/.docker/qgis_resources/test_runner:/usr/bin/test_runner \
                     -v $(pwd)/.docker/qgis_resources/supervisor:/etc/supervisor \
                     -e QGIS_BUILD_PATH=/root/QGIS/build/output/bin/qgis \
                     -e TEST_RUNNER_PATH=/usr/bin/test_runner/qgis_testrunner.py \
                     -e DISPLAY=:99 \
                     qgis_image \
                     /usr/bin/supervisord -c /etc/supervisor/supervisord.conf
          # Wait for xvfb to finish starting
          printf "Waiting for the docker...üê≥..."
          sleep 10
          echo " done ü•©"

          declare -A testrunners
          # Passing cases:
          testrunners["test_testrunner.run_passing"]=0
          testrunners["test_testrunner.run_skipped_and_passing"]=0
          # Failing cases:
          testrunners["test_testrunner"]=1
          testrunners["test_testrunner.run_all"]=1
          testrunners["test_testrunner.run_failing"]=1
          set +e # do not exit on error
          # Run tests in the docker
          for i in "${!testrunners[@]}"
          do
            echo "travis_fold:start:docker_test_runner_${i}"
            echo "test ${i}..."
            docker exec -it qgis-testing-environment sh -c "cd /tests_directory && /usr/bin/test_runner/qgis_testrunner.sh ${i}"
            [[ $? -eq "${testrunners[$i]}" ]] && echo "success" || exit 1
            echo "travis_fold:end:docker_test_runner_${i}"
          done
          set -e # switch back
          docker stop qgis-testing-environment

